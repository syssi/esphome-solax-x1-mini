# This configuration is for a Solax X1 Boost
#
# The Solax X1 Boost can be interfaced using ModbusRTU via RS485.
#
# Please `enable` the Modbus support at the settings (password 6868)
# of your inverter and make sure the modbus address is set to `1`.
#
# Kudos to @benjaminvdb and @kidwellj
#
# https://github.com/syssi/esphome-modbus-solax-x1/issues/31
# https://github.com/aiolos/ESPHome-config/blob/main/modbus-solax.yaml

substitutions:
  name: solax-x1
  device_description: "Monitor a Solax X1 Boost via RS485"
  tx_pin: GPIO16
  rx_pin: GPIO17

esphome:
  name: ${name}
  comment: ${device_description}
  project:
    name: "syssi.esphome-modbus-solax-x1"
    version: 1.2.1

esp32:
  board: wemos_d1_mini32

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

ota:

# If you use Home Assistant please remove this `mqtt` section and uncomment the `api` component!
mqtt:
  broker: !secret mqtt_host
  username: !secret mqtt_username
  password: !secret mqtt_password
  id: mqtt_client

# api:

logger:
  level: DEBUG

uart:
  id: uart0
  baud_rate: 9600
  tx_pin: ${tx_pin}
  rx_pin: ${rx_pin}

modbus:
  - id: modbus0
    uart_id: uart0
#    flow_control_pin: GPIO0

modbus_controller:
  - id: solax0
    address: 0x1
    modbus_id: modbus0
    setup_priority: -10
    update_interval: 15s

text_sensor:
  - platform: modbus_controller
    modbus_controller_id: solax0
    name: "${name} operation mode"
    address: 0x40f
    register_type: read
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("Waiting");
        case 1: return std::string("Checking");
        case 2: return std::string("Normal");
        case 3: return std::string("Fault");
        case 4: return std::string("Permanent Fault");
        case 5: return std::string("Update");
        case 6: return std::string("Off-grid waiting");
        case 7: return std::string("Off-grid");
        case 8: return std::string("Self Testing");
        case 9: return std::string("Idle");
        case 10: return std::string("Standby");
      }
      return std::string("Unknown");

sensor:
  - platform: modbus_controller
    modbus_controller_id: solax0
    name: "${name} PV1 input voltage"
    address: 0x400
    register_type: read
    value_type: U_WORD
    unit_of_measurement: V
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: solax0
    name: "${name} PV2 iput vltage"
    address: 0x401
    register_type: read
    value_type: U_WORD
    unit_of_measurement: V
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: solax0
    name: "${name} PV1 iput crrent"
    address: 0x402
    register_type: read
    value_type: U_WORD
    unit_of_measurement: A
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: solax0
    name: "${name} PV2 input current"
    address: 0x403
    register_type: read
    value_type: U_WORD
    unit_of_measurement: A
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: solax0
    name: "${name} grid voltage"
    address: 0x404
    register_type: read
    value_type: U_WORD
    unit_of_measurement: V
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: solax0
    name: "${name} grid frequency"
    address: 0x407
    register_type: read
    value_type: U_WORD
    unit_of_measurement: Hz
    device_class: frequency
    state_class: measurement
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: solax0
    name: "${name} output current"
    address: 0x40A
    register_type: read
    value_type: U_WORD
    unit_of_measurement: A
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: solax0
    name: "${name} temperature"
    address: 0x40D
    register_type: read
    value_type: U_WORD
    unit_of_measurement: "Â°C"
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: solax0
    name: "${name} inverter power"
    address: 0x40e
    register_type: read
    value_type: U_WORD
    unit_of_measurement: W
    device_class: power
    state_class: measurement
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: solax0
    id: solax0_power_dc1
    name: "${name} power dc1"
    address: 0x414
    register_type: read
    value_type: U_WORD
    unit_of_measurement: W
    device_class: power
    state_class: measurement
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: solax0
    id: solax0_power_dc2
    name: "${name} power dc2"
    address: 0x415
    register_type: read
    value_type: U_WORD
    unit_of_measurement: W
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    on_value:
      then:
        component.update: solax0_total_dc_power

  - platform: template
    id: solax0_total_dc_power
    name: "${name} total dc power"
    update_interval: never
    unit_of_measurement: W
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    lambda: |-
      return (id(solax0_power_dc1).state + id(solax0_power_dc2).state);

  - platform: modbus_controller
    modbus_controller_id: solax0
    name: "${name} energy total"
    address: 0x423
    register_type: read
    value_type: U_WORD
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: solax0
    name: "${name} energy today"
    address: 0x425
    register_type: read
    value_type: U_WORD
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
